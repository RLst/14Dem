Required data that the bots will need access to so I know the required fields to enter into the AI agent
• Random positions on the map?
• Opponent position
	List of all opponents
	Distance from the opponent
• Obstacles
	Raycast fan
• CharacterController
	Move
	Jump
	Sprint
	Crouch
• Current Target Opponent

AI Logic
==========
Entry:

Seq: Retreat
	Cond: if health is low
	Act: retreat to teammates
		//Find all teammates within a specified radius, move to the average

Seq: Targeting
	Cond: if there is a new target that's in view
	Sel:
		Seq:
			Cond:if there is no current target
			Act: Set new target as current target
		Seq:
			Cond: if the new target is in shooting range
			Act: set new target as current target with a delay

Seq: Attack or Chase
	Cond: if there is a current target
	Sel:
		Seq:
			Cond: if current target is in range
			Act: Attack
		Act: Chase

Act: Hunt
	(if Health is good, no new targets, no current target)
		//Navigate towards the average of all enemies + random direction every 3 seconds
		//Minimum move distance, max movedistance, max random angle




//OLD
	Cond: isNewTargetInRangeOrView
	Sel: SetCurrentTarget
		Seq: SetSightTargetIfNoCurrentTarget
			Cond: !hasCurrentTarget
			Act: SetSightTargetAsCurrentTarget
				SUCCESS, EXIT (stop processing further)
		Seq: Set
			Cond: isNewTargetDifferentToCurrentTarget
			Act: DelaySetNewTargetToCurrentTarget
				PENDING => SUCCESS

		//Cond: TargetInSightIsCurrentTarget	//Might not be required

Seq: Attack or Hunt
	Cond: hasCurrentTarget
	Sel: AttackIfInRange
		Seq:
		Cond: isCurrentTargetInRange
		Act: Attack


Seq: Hunt
	Cond: hasCurrentTarget

Priorities
---------
Sequence: Target
	Condition: If there is a target in range and in sight, SUCCESS
	If no current target
		Set as the current target
			SUCCESS
	If current target is the target
		FAIL
	If new target is different target
		Set as the next target
		Start timer
			PENDING
		Once timer runs out
		Set the current target as the new target
		SUCCESS

Sequence: Attack
	If there is a current target
		If within attack range
			Attack enemy
			SUCCESS
		else
			FAIL
	else
		FAIL

Sequence: Hunt,
	If there is a

Sequence: Wander, move slightly toward player + random direction


	Look for a closer enemy than the current one and wait a short time before switching to the new one
Attack target enemy

1. Attack enemy
2.

Entry
	Selector

		MoveRandomSeq; Moves slightly towards average of enemy team + random angle
			Walk slightly to a random direction + toward enemy team



Player : Unit	//Player controlled

Team { South, North }
Bot : Unit
	Bot currentTarget
	Unit[] allUnits
	Unit[] teamMates

Unit
	Team team

BehaviourAgent
	Node rootNode
	Awake()
	Start()
	FixedTickRoutine()
	Update()
	Tick()
	OnDisable()
	OnDestroy()

enum TickMode { Normal, Fixed, Manual }
BehaviourDirector
	tickMode
	agents
	+ Tick()

enum NodeState { Aborted, Suspended, None, Failure = 0, Success = 1, Pending}
abstract Node
	NodeState state
	Node parent
	virtual bool hasParent
	abstract bool hasChild
	BehaviourAgent agent;	//This is injected in by the agent
	protected GameObject gameObject => agent.gameObject;
	protected Transform transform => agent.transform;

	virtual OnAwaken(BehaviourAgent)
	virtual OnInitiate(BehaviourAgent)
	abstract NodeState OnExecute(BehaviourAgent)
	virtual OnPause(BehaviourAgent)
	virtual OnShutdown(BehaviourAgent)

abstract Composite : Node
	List<Node> children
	override bool hasChild = children.Count > 0
	internal override void OnAwaken(), OnInitiate(), OnPreExecute()...
	{
		foreach (var c in children)
			c.OnAwake(), OnInitiate()...
	}

Selector : Composite
Sequence : Composite

abstract Decorator : Node
	Node child
	override OnAwaken() => child?.OnAwaken()

abstract Leaf : Node
	protected internal override NodeState OnExecute(BehaviourAgent)

Action : Leaf

Condition : Leaf
