Required data that the bots will need access to so I know the required fields to enter into the AI agent
• Random positions on the map?
• Opponent position
	List of all opponents
	Distance from the opponent
• Obstacles
	Raycast fan
• CharacterController
	Move
	Jump
	Sprint
	Crouch
• Current Target Opponent


Nodes required
==============
isHealthLow : Condition
Retreat : Action
isNewTargetInView : Condition
SetTarget
ClearTarget
Delay
hasTarget

API needed for bots
==================
Bot.Wander()
Bot.Chase()
AimController.Aim(Target)
WeaponController.ShootWeapon()
WeaponController.ReloadWeapon()
WeaponController.NextWeapon()
Bot.Retreat(), Find all teammates within a specified radius, move to the average

AI Logic
==========
Entry - ActSel: [P]
v	Seq: Retreat
v		Cond: isHealthLow: if health is low
v		Act: Retreat() to teammates

	Seq: Targeting [P]
v		Cond: if there is a new target that's in view
		Sel: [P]
			Seq:
v				Inv+Cond:if there is no current target
v				Act: Set new target as current target
v			Act: if new target in shooting range set as current target with delay
			//Combine all these into one node
x			Seq: [P]
vx				Cond: if the new target is within shooting range
x				Act: set new target as current target with a delay [P]

	Seq: Chase or Reload or Attack
v		Cond: if there is a current target
			Seq: if current target in range and in view then chase
	v			Cond: if current target is in range and in view
				Seq: if not enough ammo then reload
	v				Inv+Cond: if not enough ammo
					Act: Reload()
				Act: Shoot()
			Act: Chase()

	Act: Hunt()
		(if Health is good, no new targets, no current target)
			//Navigate towards the average of all enemies + random direction every 3 seconds
			//Minimum move distance, max movedistance, max random angle



Architecture
=============
Unit
----
enum Team { South, North }

Unit
	Team team

Player : Unit	//Player controlled

Bot : Unit
	Bot currentTarget
	Unit[] allUnits
	Unit[] teamMates


AI
--
BehaviourAgent
	Node rootNode
	Awake()
	Start()
	FixedTickRoutine()
	Update()
	Tick()
	OnDisable()
	OnDestroy()

enum TickMode { Normal, Fixed, Manual }
BehaviourDirector
	tickMode
	agents
	+ Tick()

enum NodeState { Aborted, Suspended, None, Failure = 0, Success = 1, Pending}
abstract Node
	NodeState state
	Node parent
	virtual bool hasParent
	abstract bool hasChild
	BehaviourAgent agent;	//This is injected in by the agent
	protected GameObject gameObject => agent.gameObject;
	protected Transform transform => agent.transform;

	virtual OnAwaken(BehaviourAgent)
	virtual OnInitiate(BehaviourAgent)
	abstract NodeState OnExecute(BehaviourAgent)
	virtual OnPause(BehaviourAgent)
	virtual OnShutdown(BehaviourAgent)

abstract Composite : Node
	List<Node> children
	override bool hasChild = children.Count > 0
	internal override void OnAwaken(), OnInitiate(), OnPreExecute()...
	{
		foreach (var c in children)
			c.OnAwake(), OnInitiate()...
	}

Selector : Composite
Sequence : Composite

abstract Decorator : Node
	Node child
	override OnAwaken() => child?.OnAwaken()

abstract Leaf : Node
	protected internal override NodeState OnExecute(BehaviourAgent)

Action : Leaf

Condition : Leaf
